*** Map.cpp.old	2011-12-10 23:49:44.265550000 +0100
--- Map.cpp	2011-12-06 20:55:48.424550000 +0100
***************
*** 219,227 ****
--- 219,232 ----
          }
      }
  
+     for (std::map<uint32, DynamicLOSObject*>::iterator i = m_dynamicLOSObjects.begin(); i != m_dynamicLOSObjects.end(); ++i)
+         delete i->second;
+ 
      //lets initialize visibility distance for map
      Map::InitVisibilityDistance();
  
+     m_dynamicLOSCounter = 0;
+ 
      sScriptMgr->OnCreateMap(this);
  }
  
***************
*** 685,691 ****
      }
  }
  
! void Map::PlayerRelocation(Player* player, float x, float y, float z, float orientation)
  {
      ASSERT(player);
  
--- 690,697 ----
      }
  }
  
! void
! Map::PlayerRelocation(Player* player, float x, float y, float z, float orientation)
  {
      ASSERT(player);
  
***************
*** 709,715 ****
      player->UpdateObjectVisibility(false);
  }
  
! void Map::CreatureRelocation(Creature* creature, float x, float y, float z, float ang, bool respawnRelocationOnFail)
  {
      ASSERT(CheckGridIntegrity(creature, false));
  
--- 715,722 ----
      player->UpdateObjectVisibility(false);
  }
  
! void
! Map::CreatureRelocation(Creature* creature, float x, float y, float z, float ang, bool respawnRelocationOnFail)
  {
      ASSERT(CheckGridIntegrity(creature, false));
  
***************
*** 1159,1165 ****
      return true;
  }
  
! bool GridMap::loadLiquidData(FILE* in, uint32 offset, uint32 /*size*/)
  {
      map_liquidHeader header;
      fseek(in, offset, SEEK_SET);
--- 1166,1172 ----
      return true;
  }
  
! bool  GridMap::loadLiquidData(FILE* in, uint32 offset, uint32 /*size*/)
  {
      map_liquidHeader header;
      fseek(in, offset, SEEK_SET);
***************
*** 1201,1212 ****
      return m_area_map[lx*16 + ly];
  }
  
! float GridMap::getHeightFromFlat(float /*x*/, float /*y*/) const
  {
      return m_gridHeight;
  }
  
! float GridMap::getHeightFromFloat(float x, float y) const
  {
      if (!m_V8 || !m_V9)
          return m_gridHeight;
--- 1208,1219 ----
      return m_area_map[lx*16 + ly];
  }
  
! float  GridMap::getHeightFromFlat(float /*x*/, float /*y*/) const
  {
      return m_gridHeight;
  }
  
! float  GridMap::getHeightFromFloat(float x, float y) const
  {
      if (!m_V8 || !m_V9)
          return m_gridHeight;
***************
*** 1288,1294 ****
      return a * x + b * y + c;
  }
  
! float GridMap::getHeightFromUint8(float x, float y) const
  {
      if (!m_uint8_V8 || !m_uint8_V9)
          return m_gridHeight;
--- 1295,1301 ----
      return a * x + b * y + c;
  }
  
! float  GridMap::getHeightFromUint8(float x, float y) const
  {
      if (!m_uint8_V8 || !m_uint8_V9)
          return m_gridHeight;
***************
*** 1355,1361 ****
      return (float)((a * x) + (b * y) + c)*m_gridIntHeightMultiplier + m_gridHeight;
  }
  
! float GridMap::getHeightFromUint16(float x, float y) const
  {
      if (!m_uint16_V8 || !m_uint16_V9)
          return m_gridHeight;
--- 1362,1368 ----
      return (float)((a * x) + (b * y) + c)*m_gridIntHeightMultiplier + m_gridHeight;
  }
  
! float  GridMap::getHeightFromUint16(float x, float y) const
  {
      if (!m_uint16_V8 || !m_uint16_V9)
          return m_gridHeight;
***************
*** 1422,1428 ****
      return (float)((a * x) + (b * y) + c)*m_gridIntHeightMultiplier + m_gridHeight;
  }
  
! float GridMap::getLiquidLevel(float x, float y)
  {
      if (!m_liquid_map)
          return m_liquidLevel;
--- 1429,1435 ----
      return (float)((a * x) + (b * y) + c)*m_gridIntHeightMultiplier + m_gridHeight;
  }
  
! float  GridMap::getLiquidLevel(float x, float y)
  {
      if (!m_liquid_map)
          return m_liquidLevel;
***************
*** 1441,1447 ****
      return m_liquid_map[cx_int*m_liquid_width + cy_int];
  }
  
! uint8 GridMap::getTerrainType(float x, float y)
  {
      if (!m_liquid_type)
          return 0;
--- 1448,1454 ----
      return m_liquid_map[cx_int*m_liquid_width + cy_int];
  }
  
! uint8  GridMap::getTerrainType(float x, float y)
  {
      if (!m_liquid_type)
          return 0;
***************
*** 1824,1830 ****
      return true;
  }
  
! char const* Map::GetMapName() const
  {
      return i_mapEntry ? i_mapEntry->name[sWorld->GetDefaultDbcLocale()] : "UNNAMEDMAP\x0";
  }
--- 1831,1837 ----
      return true;
  }
  
! const char* Map::GetMapName() const
  {
      return i_mapEntry ? i_mapEntry->name[sWorld->GetDefaultDbcLocale()] : "UNNAMEDMAP\x0";
  }
***************
*** 2621,2637 ****
                      player->TeleportTo(player->GetBattlegroundEntryPoint());
  }
  
! Creature* Map::GetCreature(uint64 guid)
  {
      return ObjectAccessor::GetObjectInMap(guid, this, (Creature*)NULL);
  }
  
! GameObject* Map::GetGameObject(uint64 guid)
  {
      return ObjectAccessor::GetObjectInMap(guid, this, (GameObject*)NULL);
  }
  
! DynamicObject* Map::GetDynamicObject(uint64 guid)
  {
      return ObjectAccessor::GetObjectInMap(guid, this, (DynamicObject*)NULL);
  }
--- 2628,2647 ----
                      player->TeleportTo(player->GetBattlegroundEntryPoint());
  }
  
! Creature*
! Map::GetCreature(uint64 guid)
  {
      return ObjectAccessor::GetObjectInMap(guid, this, (Creature*)NULL);
  }
  
! GameObject*
! Map::GetGameObject(uint64 guid)
  {
      return ObjectAccessor::GetObjectInMap(guid, this, (GameObject*)NULL);
  }
  
! DynamicObject*
! Map::GetDynamicObject(uint64 guid)
  {
      return ObjectAccessor::GetObjectInMap(guid, this, (DynamicObject*)NULL);
  }
***************
*** 2641,2643 ****
--- 2651,2801 ----
      if (m_mapRefIter == player->GetMapRef())
          m_mapRefIter = m_mapRefIter->nocheck_prev();
  }
+ 
+ /*
+  * ****************** *
+  * DYNAMIC LOS SYSTEM *
+  * ****************** *
+  */
+ uint32 Map::AddDynLOSObject(float x, float y, float radius)
+ {
+     DynamicLOSObject* obj = new DynamicLOSObject();
+     obj->SetCoordinates(x, y);
+     obj->SetRadius(radius);
+ 
+     // Add the dynamic object to the map
+     m_dynamicLOSObjects[++m_dynamicLOSCounter] = obj;
+ 
+     return m_dynamicLOSCounter;
+ }
+ 
+ uint32 Map::AddDynLOSObject(float x, float y, float z, float radius, float height)
+ {
+     DynamicLOSObject* obj = new DynamicLOSObject();
+     obj->SetCoordinates(x, y);
+     obj->SetZ(z);
+     obj->SetHeight(height);
+     obj->SetRadius(radius);
+ 
+     // Add the dynamic object to the map
+     m_dynamicLOSObjects[++m_dynamicLOSCounter] = obj;
+ 
+     return m_dynamicLOSCounter;
+ }
+ 
+ void Map::SetDynLOSObjectState(uint32 id, bool state)
+ {
+     std::map<uint32, DynamicLOSObject*>::iterator iter = m_dynamicLOSObjects.find(id);
+     if (iter != m_dynamicLOSObjects.end())
+         iter->second->SetActiveState(state);
+ }
+ 
+ bool Map::GetDynLOSObjectState(uint32 id)
+ {
+     std::map<uint32, DynamicLOSObject*>::iterator iter = m_dynamicLOSObjects.find(id);
+     if (iter != m_dynamicLOSObjects.end())
+         return (iter->second->IsActive());
+     return false;
+ }
+ 
+ bool Map::IsInDynLOS(float x, float y, float z, float x2, float y2, float z2)
+ {
+     if (!m_dynamicLOSCounter)
+         return true;
+ 
+     for (std::map<uint32, DynamicLOSObject*>::iterator iter = m_dynamicLOSObjects.begin(); iter != m_dynamicLOSObjects.end(); ++iter)
+         if (iter->second->IsActive() && iter->second->IsBetween(x, y, z, x2, y2, z2))
+             return false;
+ 
+     return true;
+ }
+ 
+ DynamicLOSObject::DynamicLOSObject()
+ {
+     _x = 0.0f;
+     _y = 0.0f;
+     _z = 0.0f;
+     _height = 0.0f;
+     _radius = 0.0f;
+     _active = false;
+ }
+ 
+ bool DynamicLOSObject::IsBetween(float x, float y, float z, float x2, float y2, float z2)
+ {
+     if (IsInside(x, y) || IsInside(x2, y2))
+     {
+         if(HasHeightInfo() && IsOverOrUnder(z2))
+             return false;
+ 
+         return true;
+     }
+ 
+     // For a real handling of Z coord is necessary to do some research from this point
+     // i.e. A player over a huge round plattaform, placed near the edge; and other player placed  down the plattaform at the oposing extreme just next to the edge;
+     // both may be able to attack each other, even when the plattaform height should prevent that.
+     if ((std::max(x, x2) < (_x - _radius))
+         || (std::min(x, x2) > (_x + _radius))
+         || (std::max(y, y2) < (_y - _radius))
+         || (std::min(y, y2) > (_y + _radius)))
+         return false;
+ 
+ 
+     float angleToMe = atan2(_x - x, _y - y);
+     angleToMe = (angleToMe >= 0) ? angleToMe : 2 * M_PI + angleToMe;
+ 
+     float angleToDest = atan2(x2 - x, y2 - y);
+     angleToDest = (angleToDest >= 0) ? angleToDest : 2 * M_PI + angleToDest;
+ 
+     return (fabs(sin(angleToMe - angleToDest)) * GetDistance(x, y) < _radius);
+ }
+ 
+ bool DynamicLOSObject::IsInside(float x, float y)
+ {
+     return (((x-_x)*(x-_x)+(y-_y)*(y-_y))<(_radius*_radius));
+ }
+ 
+ bool DynamicLOSObject::IsOverOrUnder(float z)
+ {
+     return ((z < _z+_height) && (z > _z));
+ }
+ 
+ float DynamicLOSObject::GetDistance(float x, float y)
+ {
+     return sqrtf((x-_x)*(x-_x)+(y-_y)*(y-_y));
+ }
+ 
+ bool DynamicLOSObject::IsActive()
+ {
+     return _active;
+ }
+ 
+ void DynamicLOSObject::SetActiveState(bool state)
+ {
+     _active = state;
+ }
+ 
+ void DynamicLOSObject::SetCoordinates(float x, float y)
+ {
+     _x = x;
+     _y = y;
+ }
+ 
+ void DynamicLOSObject::SetRadius(float r)
+ {
+     _radius = r;
+ }
+ 
+ void DynamicLOSObject::SetZ(float z)
+ {
+     _z = z;
+ }
+ 
+ void DynamicLOSObject::SetHeight(float h)
+ {
+     _height = h;
+ }
+ 
+ bool DynamicLOSObject::HasHeightInfo()
+ {
+     return (_z != 0 || _height != 0);
+ }
