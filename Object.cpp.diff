*** Object.cpp.old	2011-12-10 23:49:43.915550000 +0100
--- Object.cpp	2011-12-06 20:55:48.028550000 +0100
***************
*** 1349,1355 ****
  
      float ox, oy, oz;
      obj->GetPosition(ox, oy, oz);
!     return(IsWithinLOS(ox, oy, oz));
  }
  
  bool WorldObject::IsWithinLOS(float ox, float oy, float oz) const
--- 1349,1355 ----
  
      float ox, oy, oz;
      obj->GetPosition(ox, oy, oz);
!     return (IsWithinLOS(ox, oy, oz) && GetMap()->IsInDynLOS(GetPositionX(), GetPositionY(), GetPositionZ(), ox, oy, oz));
  }
  
  bool WorldObject::IsWithinLOS(float ox, float oy, float oz) const
***************
*** 1357,1363 ****
      float x, y, z;
      GetPosition(x, y, z);
      VMAP::IVMapManager* vMapManager = VMAP::VMapFactory::createOrGetVMapManager();
!     return vMapManager->isInLineOfSight(GetMapId(), x, y, z+2.0f, ox, oy, oz+2.0f);
  }
  
  bool WorldObject::GetDistanceOrder(WorldObject const* obj1, WorldObject const* obj2, bool is3D /* = true */) const
--- 1357,1363 ----
      float x, y, z;
      GetPosition(x, y, z);
      VMAP::IVMapManager* vMapManager = VMAP::VMapFactory::createOrGetVMapManager();
!     return (vMapManager->isInLineOfSight(GetMapId(), x, y, z+2.0f, ox, oy, oz+2.0f) && GetMap()->IsInDynLOS(GetPositionX(), GetPositionY(), GetPositionZ(), ox, oy, oz));
  }
  
  bool WorldObject::GetDistanceOrder(WorldObject const* obj1, WorldObject const* obj2, bool is3D /* = true */) const
***************
*** 1642,1648 ****
      bool corpseVisibility = false;
      if (distanceCheck)
      {
!         if (Player const* thisPlayer = ToPlayer())
          {
              if (thisPlayer->isDead() && thisPlayer->GetHealth() > 0 && // Cheap way to check for ghost state
                  !(obj->m_serverSideVisibility.GetValue(SERVERSIDE_VISIBILITY_GHOST) & m_serverSideVisibility.GetValue(SERVERSIDE_VISIBILITY_GHOST) & GHOST_VISIBILITY_GHOST))
--- 1642,1648 ----
      bool corpseVisibility = false;
      if (distanceCheck)
      {
!         if (const Player* thisPlayer = ToPlayer())
          {
              if (thisPlayer->isDead() && thisPlayer->GetHealth() > 0 && // Cheap way to check for ghost state
                  !(obj->m_serverSideVisibility.GetValue(SERVERSIDE_VISIBILITY_GHOST) & m_serverSideVisibility.GetValue(SERVERSIDE_VISIBILITY_GHOST) & GHOST_VISIBILITY_GHOST))
***************
*** 1675,1683 ****
      if (!corpseVisibility && !(obj->m_serverSideVisibility.GetValue(SERVERSIDE_VISIBILITY_GHOST) & m_serverSideVisibilityDetect.GetValue(SERVERSIDE_VISIBILITY_GHOST)))
      {
          // Alive players can see dead players in some cases, but other objects can't do that
!         if (Player const* thisPlayer = ToPlayer())
          {
!             if (Player const* objPlayer = obj->ToPlayer())
              {
                  if (thisPlayer->GetTeam() != objPlayer->GetTeam() || !thisPlayer->IsGroupVisibleFor(objPlayer))
                      return false;
--- 1675,1683 ----
      if (!corpseVisibility && !(obj->m_serverSideVisibility.GetValue(SERVERSIDE_VISIBILITY_GHOST) & m_serverSideVisibilityDetect.GetValue(SERVERSIDE_VISIBILITY_GHOST)))
      {
          // Alive players can see dead players in some cases, but other objects can't do that
!         if (const Player* thisPlayer = ToPlayer())
          {
!             if (const Player* objPlayer = obj->ToPlayer())
              {
                  if (thisPlayer->GetTeam() != objPlayer->GetTeam() || !thisPlayer->IsGroupVisibleFor(objPlayer))
                      return false;
***************
*** 2018,2023 ****
--- 2018,2024 ----
      SendMessageToSetInRange(data, GetVisibilityRange(), self);
  }
  
+ 
  void WorldObject::SendMessageToSetInRange(WorldPacket* data, float dist, bool /*self*/)
  {
      Trinity::MessageDistDeliverer notifier(this, data, dist);
***************
*** 2654,2662 ****
          // move back a bit
          destx -= CONTACT_DISTANCE * cos(angle);
          desty -= CONTACT_DISTANCE * sin(angle);
-         dist = sqrt((pos.m_positionX - destx)*(pos.m_positionX - destx) + (pos.m_positionY - desty)*(pos.m_positionY - desty));
      }
  
      float step = dist/10.0f;
  
      for (uint8 j = 0; j < 10; ++j)
--- 2655,2672 ----
          // move back a bit
          destx -= CONTACT_DISTANCE * cos(angle);
          desty -= CONTACT_DISTANCE * sin(angle);
      }
  
+     while (!GetMap()->IsInDynLOS(pos.m_positionX, pos.m_positionY, pos.m_positionZ, destx, desty, destz))
+     {
+         destx -= 2.0f * cos(angle);
+         desty -= 2.0f * sin(angle);
+         col = true;
+     }
+ 
+     if (col)
+         dist = sqrt((pos.m_positionX - destx)*(pos.m_positionX - destx) + (pos.m_positionY - desty)*(pos.m_positionY - desty));
+ 
      float step = dist/10.0f;
  
      for (uint8 j = 0; j < 10; ++j)
***************
*** 2747,2752 ****
--- 2757,2779 ----
      VisitNearbyWorldObject(GetVisibilityRange(), notifier);
  }
  
+ Player* WorldObject::FindNearestPlayer(float range, bool alive)
+ {
+     Player* player = NULL;
+     Trinity::AnyPlayerInObjectRangeCheck checker(this, range, alive);
+     Trinity::PlayerSearcher<Trinity::AnyPlayerInObjectRangeCheck> searcher(this, player, checker);
+     VisitNearbyWorldObject(range, searcher);
+     return player;
+ }
+ 
+ std::list<Player*> WorldObject::GetNearestPlayersList(float range, bool alive) {
+     std::list<Player*> players;
+     Trinity::AnyPlayerInObjectRangeCheck checker(this, range, alive);
+     Trinity::PlayerListSearcher<Trinity::AnyPlayerInObjectRangeCheck> searcher(this, players, checker);
+     VisitNearbyWorldObject(range, searcher);
+     return players;
+ }
+ 
  struct WorldObjectChangeAccumulator
  {
      UpdateDataMapType& i_updateDatas;
